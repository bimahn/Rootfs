# Copyright (C) 2024 Maizil41 https://github.com/maizil41
#
name: Build OpenWRT Rootfs

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      openwrt_ver:
        description: 'Select OpenWrt Version'
        required: true
        default: '23.05.0'
        type: choice
        options:
          - '23.05.0'
          - '23.05.1'
          - '23.05.2'
          - '23.05.3'
          - '23.05.4'
          - '23.05.5'
          - '24.10.0'
          - '24.10.1'
          - '24.10.2'
          - '24.10.3'
      openwrt_target:
        description: 'Select OpenWrt Targets'
        required: true
        default: 'armsr/armv8'
        type: choice
        options:
          - 'armsr/armv8'
      tunnel:
        description: 'Select Tunnel To Install'
        required: true
        default: 'All'
        type: choice
        options:
          - 'All'
          - 'Openclash'
          - 'Nikki'
      rakitan:
        description: 'Modem Rakitan Support'
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  make_rootfs:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt update -y > /dev/null 2>&1
        sudo apt install net-tools make gawk git curl unzip bzip2 tar zstd -y > /dev/null 2>&1
        sudo apt install -y $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt) > /dev/null 2>&1

    - name: Download Image Builder
      run: |
        if [[ "${{ github.event.inputs.openwrt_ver }}" == 23.* ]]; then
          builder_link="https://downloads.openwrt.org/releases/${{ github.event.inputs.openwrt_ver }}/targets/${{ github.event.inputs.openwrt_target }}/openwrt-imagebuilder-${{ github.event.inputs.openwrt_ver }}-armsr-armv8.Linux-x86_64.tar.xz"
        elif [[ "${{ github.event.inputs.openwrt_ver }}" == 24.* ]]; then
          builder_link="https://downloads.openwrt.org/releases/${{ github.event.inputs.openwrt_ver }}/targets/${{ github.event.inputs.openwrt_target }}/openwrt-imagebuilder-${{ github.event.inputs.openwrt_ver }}-armsr-armv8.Linux-x86_64.tar.zst"
        fi
        wget -q "${builder_link}" > /dev/null 2>&1
        
        echo "builder_link=${builder_link}" >> $GITHUB_ENV

    - name: Extract Image Builder
      run: |
        filename=$(echo "${{ env.builder_link }}" | awk -F "/" '{print $NF}')
        # extension=$(echo "$filename" | awk -F'.' '{print $(NF-1)"."$NF}')
        # no_extension=$(basename "$filename" | sed "s/\.$extension$//")
        mkdir -p OpenWrt-Builder
        tar -x -f ${filename} -C OpenWrt-Builder --strip-components=1
        
        if [[ "${{ github.event.inputs.openwrt_ver }}" == 23.* ]]; then
          mv packages/23.05/* OpenWrt-Builder/packages/
        elif [[ "${{ github.event.inputs.openwrt_ver }}" == 24.* ]]; then
          mv packages/24.10/* OpenWrt-Builder/packages/
        fi
        
        if [[ "${{ github.event.inputs.openwrt_ver }}" == 23.* ]]; then
          mv files/23.05/files OpenWrt-Builder/files
        elif [[ "${{ github.event.inputs.openwrt_ver }}" == 24.* ]]; then
          mv files/24.10/files OpenWrt-Builder/files
        fi
        
        chmod -R 755 OpenWrt-Builder/files/*

        sed -i 's/option check_signature/# option check_signature/g' OpenWrt-Builder/repositories.conf
        sed -i '/# option check_signature/a src/gz custom_arch https://raw.githubusercontent.com/lrdrdn/my-opkg-repo/main/aarch64_generic' OpenWrt-Builder/repositories.conf
        sed -i '/# option check_signature/a src/gz custom_generic https://raw.githubusercontent.com/lrdrdn/my-opkg-repo/main/generic' OpenWrt-Builder/repositories.conf


    - name: Build OpenWRT Rootfs
      run: |
        cd OpenWrt-Builder
        
        PACKAGES=" \
        -dnsmasq -luci-theme-bootstrap \
        dnsmasq-full cgi-io libiwinfo libiwinfo-data libiwinfo-lua liblua liblucihttp liblucihttp-lua \
        libubus-lua lua luci luci-app-firewall luci-app-opkg luci-base luci-lib-base \
        luci-lib-ip luci-lib-jsonc luci-lib-nixio luci-mod-admin-full luci-mod-network \
        luci-mod-status luci-mod-system luci-proto-ipv6 luci-proto-ppp luci-ssl \
        luci-theme-material rpcd rpcd-mod-file rpcd-mod-iwinfo rpcd-mod-luci \
        rpcd-mod-rrdns uhttpd uhttpd-mod-ubus luci-compat \
        ath9k-htc-firmware btrfs-progs hostapd hostapd-utils kmod-ath kmod-ath9k kmod-ath9k-common \
        kmod-ath9k-htc kmod-cfg80211 kmod-crypto-acompress kmod-crypto-crc32c kmod-crypto-hash \
        kmod-fs-btrfs kmod-mac80211 wireless-tools wpa-cli wpa-supplicant libc \
        php8 php8-cgi php8-mod-session php8-mod-ctype php8-mod-fileinfo php8-mod-zip php8-mod-iconv php8-mod-mbstring \
        zoneinfo-core zoneinfo-asia nano htop unzip wget wget-ssl libmbedtls tar bash  \
        netdata httping coreutils-timeout kmod-usb-net-rndis iperf3 \
        usbutils kmod-usb-net-cdc-ether usb-modeswitch openssh-sftp-server kmod-usb2 \
        kmod-usb-net-huawei-cdc-ncm kmod-usb-serial-wwan \
        perlbase-file kmod-brcmutil perlbase-essential perlbase-utf8 \
        perlbase-file  perlbase-time perlbase-xsloader coreutils-stat sudo \
        luci-app-modeminfo luci-app-3ginfo-lite luci-app-modemband luci-app-sms-tool-js luci-app-internet-detector \
        luci-app-ttyd luci-app-amlogic luci-app-diskman luci-app-tailscale"
        atinout chat chinadns-ng comgt coreutils-base64 dbus dns2socks dtc glib2 kmod-crypto-sha256 kmod-gpio-button-hotplug kmod-inet-diag kmod-leds-gpio kmod-nf-socket kmod-nf-tproxy kmod-nft-socket kmod-nft-tproxy kmod-usb-net-asix-ax88179 kmod-usb-net-rtl8152 libdbus libexpat libffi libgd libjpeg-turbo libmbim libminiupnpc libnatpmp1 libopenssl-conf libpng libqmi libqrtr-glib libsqlite3-0 libuci-lua libwebp luci-app-3ginfo-lite luci-app-huawei-hilink luci-app-nikki luci-app-passwall luci-app-sms-tool luci-app-tailscale luci-app-tinyfm luci-app-vnstat2 luci-app-zerotier luci-proto-mbim luci-proto-xmm luci-theme-alpha4 luci-theme-material3 microsocks modeminfo modeminfo-serial-xmm nikki openssl-util r8152-firmware resolveip screen sms-tool tailscale tcping vnstat2 vnstati2 wwan xmm-modem yq zerotier \

        if [[ "${{ github.event.inputs.tunnel }}" == "All" ]]; then
          PACKAGES="$PACKAGES luci-app-nikki luci-app-openclash"
        elif [[ "${{ github.event.inputs.tunnel }}" == "Openclash" ]]; then
          PACKAGES="$PACKAGES luci-app-openclash"
        elif [[ "${{ github.event.inputs.tunnel }}" == "Nikki" ]]; then
          PACKAGES="$PACKAGES luci-app-nikki"
        fi

        if [[ "${{ github.event.inputs.rakitan }}" == "true" ]]; then
          PACKAGES="$PACKAGES kmod-mii kmod-usb-net kmod-usb-wdm kmod-usb-net-qmi-wwan uqmi luci-proto-qmi \
          kmod-usb-net-cdc-ether kmod-usb-serial-option kmod-usb-serial kmod-usb-serial-wwan qmi-utils \
          kmod-usb-serial-qualcomm kmod-usb-acm kmod-usb-net-cdc-ncm kmod-usb-net-cdc-mbim umbim \
          modemmanager luci-proto-modemmanager"
        fi

        make image PROFILE="generic" PACKAGES="$PACKAGES" FILES="files" || true

    - name: Find Rootfs
      run: |
        FILE_PATH=$(find -name "*rootfs.tar.gz" | head -n 1)
        echo "FILE_PATH=$FILE_PATH" >> $GITHUB_ENV
        echo -e "Found Rootfs Path: $FILE_PATH"

    - name: Create Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
      with:
        name: Mutiara-Wrt ${{ github.event.inputs.openwrt_ver }}
        tag_name: ${{ github.event.inputs.openwrt_ver }}
        draft: false
        prerelease: false
        files: |
              ${{ env.FILE_PATH }}
        body: |
              Mutiara-Wrt ${{ github.event.inputs.openwrt_ver }} Rootfs
